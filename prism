#!/usr/bin/env python3

import torch
import numpy as np
import torch.nn as nn
import os, glob
from torchvision import transforms
from torchvision import models
from torchprism import PRISM
import matplotlib.pyplot as plt
import cv2
from PIL import Image
import json
import argparse
import textwrap


class SmartFormatter(argparse.HelpFormatter):
    def _split_lines(self, text, width):
        if text.startswith('R|'):
            return text[2:].splitlines()
        # this is the RawTextHelpFormatter._split_lines
        return argparse.HelpFormatter._split_lines(self, text, width)

with open("classes.json") as json_file:
    CLASSES = json.load(json_file)

CLASSES_IDs = { int(k): v.split(",")[0].replace(" ", "_") for k,v in CLASSES.items() }
CLASSES_NAMEs = { v.split(",")[0].replace(" ", "_").lower(): int(k) for k,v in CLASSES.items() }

crop = transforms.Compose([
    transforms.ToPILImage(),
    transforms.Resize((224, 224))
])

normalize = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])

def read_images_2_batch(images_path="./samples/*.jpg"):
    image_files = glob.glob(images_path)
    image_files.sort()

    input_images = [ cv2.cvtColor(cv2.imread(f), cv2.COLOR_BGR2RGB) for f in image_files ]
    input_batch = torch.stack([normalize(crop(image)) for image in input_images])

    return image_files, input_images, input_batch

def prepare_network(arch):
    if arch.startswith("./"):
        model = torch.load(arch)
    else:
        model = models.__dict__[arch](pretrained=True)

    model.eval()
    PRISM.register_hooks(model)
    return model

def print_output(output, image_files_names):
    listed_output = [ { CLASSES_IDs[i]: val for i, val in enumerate(o.tolist()) } for o in output ]
    classification = []
    for i, name in enumerate(image_files_names):
        print(f"\n{name}:")
        classes = []
        for k, v in sorted(listed_output[i].items(), key=lambda o: o[1], reverse=True)[:5]:
            # print(f"{k}: {v:.2f}")
            classes.append(f"{k}: {v:.2f}")
        classification.append(classes)
    return classification

def normalize_image(image):
    # change image tensor from -1,1 to 0,1
    return (image - image.min()) / (image.max() - image.min())

def main(args):
    print(args)
    arches = [args.model]

    for arch in arches:
        with torch.no_grad():
            print(arch)
            PRISM.prune_old_hooks(None)
            model = prepare_network(arch)

            image_files_names, input_images, input_batch = read_images_2_batch(args.input)

            if torch.cuda.is_available():
                print("Running on GPU")
                input_batch = input_batch.to("cuda")
                model.to("cuda")


            output = model(input_batch)
            percentage = nn.Softmax(dim=1)
            # print(f"SHAPE {output.shape}")
            classification = print_output(percentage(output), image_files_names)

            prism_maps = PRISM.get_maps(
                grad_extrap=args.no_gradual_extrapolation,
                inclusive=args.inclusive,
                exclusive=args.exclusive
                ).permute(0, 2, 3, 1).detach().cpu().numpy()

            plt.title(f"PRISM")
            columns = input_batch.shape[0]
            if args.split_rgb:
                fig, ax = plt.subplots(nrows=5, ncols=columns)
            else:
                fig, ax = plt.subplots(nrows=2, ncols=columns)
            input_batch = input_batch.permute(0, 2, 3, 1).detach().cpu().numpy()

            if columns == 1:
                ax[0].imshow(normalize_image(input_batch[0]))
                ax[0].set_title("\n".join(classification[0]), fontsize=3)
                ax[0].axis('off')
                ax[1].imshow(prism_maps[0])
                ax[1].axis('off')

                if args.split_rgb:
                    ax[1].imshow(prism_maps[0])
                    ax[2].imshow(prism_maps[0][:, :, 0], cmap="Reds")
                    ax[3].imshow(prism_maps[0][:, :, 1], cmap="Greens")
                    ax[4].imshow(prism_maps[0][:, :, 2], cmap="Blues")
                    for i in range(2, 5):
                        ax[i].axis('off')

            else:
                for column in range(columns):
                    ax[0][column].imshow(normalize_image(input_batch[column]))
                    ax[0][column].set_title("\n".join(classification[column]), fontsize=3)
                    ax[0][column].axis('off')

                for column in range(columns):
                    ax[1][column].imshow(prism_maps[column])
                    ax[1][column].axis('off')

                    if args.split_rgb:
                        ax[2][column].imshow(prism_maps[column][:, :, 0], cmap="Reds")
                        ax[3][column].imshow(prism_maps[column][:, :, 1], cmap="Greens")
                        ax[4][column].imshow(prism_maps[column][:, :, 2], cmap="Blues")
                        for i in range(2, 5):
                            ax[i][column].axis('off')

            fig.tight_layout()
            plt.savefig(f"results/PRISM_{arch}.jpg", format='jpg', bbox_inches="tight", dpi=500)

            variances = PRISM.get_variances()
            fig = plt.figure()
            ax = fig.add_axes([0,0,1,1])
            channels = [i for i in range(len(variances))]
            ax.bar(channels,variances)
            plt.savefig(f"results/PRISM_var_{arch}.jpg", format='jpg', bbox_inches="tight", dpi=500)

def parse_args():
    parser = argparse.ArgumentParser(
        description="Analize deep vision for a batch of images",
        formatter_class=SmartFormatter)

    parser.add_argument("--no-gradual-extrapolation", action="store_false",
        help="Skip performing GradualExtrapolation of analysis\n" +
        "See: https://ieeexplore.ieee.org/abstract/document/9468713")

    parser.add_argument("--inclusive", action="store_true",
        help="R|Quantize PRISM output and show features detected on all images\n"+
        "Can be used with '--exclusive' for full quantized PRISM output")
    parser.add_argument("--exclusive", action="store_true",
        help="R|Quantize PRISM output and show features unique to given image\n"+
        "Can be used with '--inclusive' for full quantized PRISM output")
    parser.add_argument("--split-rgb", action="store_true",
        help="Split colors into RGB channels")

    parser.add_argument("--model", default="vgg16",
        help="Choose model from the PyTorch pre-trained zoo. Default %(default)s",
        choices=["vgg11",
        "vgg16",
        "vgg19",
        "resnet18",
        "resnet50",
        "resnet101",
        "googlenet",
        "alexnet",
        "mobilenet_v2",
        "squeezenet1_0"])

    parser.add_argument("--input", default="./samples/*.jpg",
        help="Glob to find input images. Default %(default)s")

    return parser.parse_args()

if __name__ == "__main__":
    args = parse_args()
    main(args)
